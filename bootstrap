#!/usr/bin/env bash
#
# Copyright (C) 2025, David J. Rosenbaum <djr7c4@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [[ ! -d ".git" ]]; then
    echo "This script must be run from the top-level of a git repository" >&2
    exit 1
fi

latest_stable() {
    repo="$1"
    git ls-remote "$repo" | awk '{ print $2 }' | sed -n 's:\^{}::; s:^refs/tags/::p' | sort -V | uniq | tail -n 1
}

repos=("https://github.com/rolandwalker/anaphora.git master" "https://github.com/magnars/dash.el.git master" "https://github.com/rejeep/f.el.git master" "https://github.com/djr7C4/emacs-memoize.git master" "https://github.com/magnars/s.el.git master" "https://github.com/jwiegley/emacs-async master" "https://github.com/tarsius/llama main" "https://github.com/djr7C4/rem.git main" "https://github.com/djr7C4/subtree-package.git main")

pkg_info_file="stp-pkg-info.eld"

echo "Should stable or unstable (latest) versions be installed?"
select update in "stable" "unstable"; do break; done

echo "((packages" > "$pkg_info_file"

for item in "${repos[@]}"; do
    repo="$(echo "$item" | cut -d ' ' -f 1)"
    branch="$(echo "$item" | cut -d ' ' -f 2)"
    pkg_name="${repo##*/}"
    pkg_name="${pkg_name%.git}"
    pkg_name="${pkg_name%.el}"
    pkg_name="${pkg_name#emacs-}"

    if [[ "$update" = "stable" ]]; then
        version="$(latest_stable "$repo")"
        branch_cell=""
    else
        version="$branch"
        branch_cell=" (branch . \"${branch}\")"
    fi

    git subtree add --prefix "package-source/${pkg_name}" --squash "$repo" "$version"
    echo "(\"${pkg_name}\" (method . git) (remote . \"${repo}\") (update . ${update})${branch_cell})" >> "$pkg_info_file"
done

echo -e "))\n" >> "$pkg_info_file"
