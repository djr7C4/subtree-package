* Subtree package
Subtree package (STP) is a package manager for Emacs that stores packages as git
subtrees in the git repository for your Emacs configuration.
* Motivation
- Reproducing your configuration is trivially achieve by cloning the git
  repository
- This works even if some of the repositories for packages it depends on no
  longer exist (which does happen occasionally)
- There is no need to initialize submodules since git subtree is used
- It is easy to migrate existing configurations that use git subtrees to manage
  packages
* Features
** Manage all installed packages
The main entry point to STP is =M-x stp-list= which shows all installed packages
using =stp-list-mode= and has convenience bindings for
- installing (=i=),
- upgrading (=u=)
- building source (=b=)
- building info (=m=)
- uninstalling (=x=),
- repairing (=r=) and
- toggling between stable and unstable (=t=),
- reloading (=G=) and
- adding to the load path (=l=).
** Automatically detect stable versions
Stable versions of packages are automatically inferred from tags in the git
repository. =stp-version-extractor-alist= can be modified in order to support
unusual version strings if a package uses a scheme that is not supported by the
defaults. Contributions of missing version extractors are very welcome!
** Install any commit by branch or hash
Packages are automatically fetched before they are installed or upgraded when
=stp-subtree-fetch= is non-nil. This allows a hash to be specified instead of a
tag or branch.
** Mark packages as stable or unstable
Stable releases are automatically detected from tags in git repositories or ELPA
releases. Stable packages are only upgraded to other stable releases by default.

Packages can also be marked as unstable which allows them to installed
and upgraded to any hash, branch or tag.
** Automatically build packages
Use =M-x stp-build= Packages can be built automatically by detecting Makefiles
or other build systems as well as compiling the elisp files directly. Info
manuals are also automatically detected and added to Emacs' info search path.
** Automatically repair packages
Use =M-x stp-repair-all= and =M-x stp-repair= to repair information in the
package database that may have become out of sync with installed packages. This
can be useful when the package database is not updated because a user updated a
package using git commands manually or there is a bug.
** Supported package types
Currently, three different types of packages can be installed.
- git repositories
- GNU ELPA packages
- URL packages (when the source is a single file that can be accessed via a URL)
* Installation
Subtree package can manage itself as a package. It is recommended to place the
bootstraping code in =early-init.el=.
#+begin_src emacs-lisp
  (require 'stp-bootstrap (expand-file-name "path/to/package-source/subtree-package/stp-bootstrap.el"))

  (setq stp-source-directory "path/to/package-source/"
        stp-info-file (expand-file-name "pkg-info.eld" djr-emacs-user-code-directory))

  ;; Set up dependencies for STP itself.
  (stp-bootstrap)
  ;; Add installed packages to the load path.
  (stp-update-load-paths)
#+end_src

In your =~/.emacs= or =~/.emacs.d/init.el=

#+begin_src emacs-lisp
  (require 'stp)

  (keymap-global-set "C-c P" #'stp-list)
#+end_src

You will also need to manually install the dependencies of STP before it can
used. The simplest way is to run the bootstrap script from this repository in
the top-level directory of the Git repository for your Emacs configuration.

#+begin_src bash
  cd <emacs-git-directory>
  curl -s https://raw.githubusercontent.com/djr7C4/subtree-packages/refs/heads/main/bootstrap | bash
#+end_src

After the packages are installed, restart Emacs and run =M-x stp-repair-all= to
initialize the package information database from the Git repository.

Alternatively, you can manually install each of the dependencies using

#+begin_src bash
  git subtree add --prefix "path/to/package-source/pkg-name" --squash <repo-url> <package-ref>
#+end_src

for each dependency.
