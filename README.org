* Subtree package
Subtree package (STP) is a package manager for Emacs that stores packages as git
subtrees in the git repository for your Emacs configuration.
* Motivation
- Reproducing your configuration is trivial on a new machine using git clone
- This works even if some of the repositories for packages it depends on no
  longer exist
- There is no need to initialize submodules since git subtree is used
- It is easy to migrate existing configurations that manually use git subtree to
  manage packages
* Features
** Manage all installed packages
The main entry point to STP is =M-x stp-list= which shows all installed packages
using =stp-list-mode= and has convenience bindings for
- installing (=i=),
- upgrading (=u=),
- building source (=b=),
- building info (=m=),
- editing remotes (=e=),
- uninstalling (=x=),
- toggling between stable and unstable (=t=),
- find the latest stable and unstable versions for
  + the current package (=v=) or
  + all packages (=V=),
- repairing (=r=) and
- editing available remotes (=e=),
- reloading (=G=),
- adding to the load path (=l=) and
- viewing the source code (=RET=)
** Automatically detect stable versions
Stable versions of packages are automatically inferred from tags in the git
repository. =stp-version-extractor-alist= can be modified in order to support
unusual version strings if a package uses a scheme that is not supported by the
defaults. Contributions of missing version extractors are very welcome!
** Install any commit by branch or hash
Git repositories are automatically fetched before packages are installed or
upgraded when =stp-subtree-fetch= is non-nil. This allows a hash to be specified
instead of a tag or branch.
** Mark packages as stable or unstable
Stable releases are automatically detected from tags in git repositories or ELPA
releases. Stable packages are only upgraded to other stable releases by default.

Packages can also be marked as unstable which allows them to installed
and upgraded to any hash, branch or tag.
** Find upgradable packages
Use =v= in =stp-list-mode= to find the latest stable and unstable versions for
the current package and display this information in a latest field.

Only git packages have unstable versions so this information is omitted for ELPA
packages. There is no way to retrieve any version information at all for URL
packages so the latest version is omitted entirely.

For git packages, the number of commits required to reach the latest version
from the currently installed version is shown in parentheses. For ELPA packages,
the number in parentheses is the number of stable versions since the currently
installed version.
** Choose between multiple remotes
STP remembers all remotes that the user has entered when upgrading a package.
These are available for the user to choose for future upgrades using completion.
Set =stp-read-remote-default-directory= to the directory that contains your
elisp repositories to allow for convenient completion of local directories via
=stp-install=, =stp-upgrade= and =stp-edit-remotes=. Simply enter =./= at the remote completion prompt to begin directory completion.
** Quickly open the source in a local git repository
When developing packages that are installed with STP, a copy of the source code
will be installed as a git subtree and there will also be a local copy of git
repository on which development is already performed. With an installed packages
copy of a file open, =stp-find-package= can be to find the corresponding file on
local git repositories that are registered as remotes for that package or are in
=stp-read-remote-default-directory=. When desired, install or upgrade the
package from the local git repository using =stp-install= or =stp-upgrade=.
** Automatically build packages
Use =M-x stp-build= Packages can be built automatically by detecting Makefiles
or other build systems as well as compiling the elisp files directly. Info
manuals are also automatically detected and added to Emacs' info search path.
** Automatically repair packages
Use =M-x stp-repair-all= and =M-x stp-repair= to repair information in the
package database that may have become out of sync with installed packages. This
can be useful when the package database is not updated because a user updated a
package using git commands manually or there is a bug.
** Supported package types
Currently, three different types of packages can be installed. STP automatically
infers the packages type based on the remote provided so it is not necessary to
specify the type manually.
*** Git repositories
To install a git repository in STP, simply provide its URL as the remote. Some
packages are also available as ELPA or URL packages. In such cases, it is
usually best to install them as git packages instead.
*** GNU ELPA packages
Use the page for the package on =elpa.gnu.org= as the remote. For example, for
=ace-window= this would be =https://elpa.gnu.org/packages/ace-window.html=.
*** URL packages
When the source is a single file or a tarball that can be accessed via a URL the
package can be installed as a URL package using this URL as the remote. Unlike
git and ELPA packages, there is no way for STP to detect the version of a URL
package due to the lack of useful metadata. Therefore, it is up to the user to
supply the version in this case.
* Installation
Subtree package can manage itself as a package. It is recommended to place the
bootstraping code in =early-init.el=.
#+begin_src emacs-lisp
  (require 'stp-bootstrap (expand-file-name "path/to/package-source/subtree-package/stp-bootstrap.el"))

  (setq stp-source-directory "path/to/package-source/"
        stp-info-file (expand-file-name "pkg-info.eld" djr-emacs-user-code-directory))

  ;; Set up dependencies for STP itself.
  (stp-bootstrap)
  ;; Add installed packages to the load path.
  (stp-update-load-paths)
#+end_src

In your =~/.emacs= or =~/.emacs.d/init.el=

#+begin_src emacs-lisp
  (require 'stp)

  (keymap-global-set "C-c P" #'stp-list)
#+end_src

You will also need to manually install the dependencies of STP before it can
used. The simplest way is to run the bootstrap script from this repository in
the top-level directory of the git repository for your Emacs configuration.

#+begin_src bash
  cd <emacs-git-directory>
  curl -s https://raw.githubusercontent.com/djr7C4/subtree-packages/refs/heads/main/bootstrap | bash
#+end_src

After the packages are installed, restart Emacs and run =M-x stp-repair-all= to
initialize the package information database from the git repository.

Alternatively, you can manually install each of the dependencies using

#+begin_src bash
  git subtree add --prefix "path/to/package-source/pkg-name" --squash <repo-url> <package-ref>
#+end_src

for each dependency.

STP also requires that you install =atool= if you wish to install ELPA and
compressed URL packages. Additionally, to support certain non-essential
commands, the ELPA queue package is required.
* Recommended bindings
#+begin_src emacs-lisp
  (keymap-global-set "C-c O" #'stp-find-package)
  (keymap-global-set "C-c P" #'stp-list)
#+end_src
